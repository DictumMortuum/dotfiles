#!/bin/bash

set -e

ID=$(id -u)
export XDG_RUNTIME_DIR="/run/user/${ID}"
export DBUS_SESSION_BUS_ADDRESS="unix:path=/run/user/${ID}/bus"

function type-text() {
  xdotool type --delay 3 --clearmodifiers -- "$*"
}

function get-jira() {
  grep -o -E '[A-Z]+-[0-9]+' | sort -u
}

function rofi-select() {
  rofi -dmenu -matching fuzzy -i | if [[ $# -eq 0 ]]; then
    cat -
  else
    xargs --no-run-if-empty -I{} $*
  fi
}

function get-tokens() {
  grep -o -E '[^[:space:]]+' | sort -u -f -r | rofi-select 'echo -n {}' | tr -d '[:space:]'
}

function detect-url() {
  if [[ $# -eq 0 ]]; then
    xurls
  else
    xurls -m $1
  fi | sort | uniq
}

function sync-repo() {
  GIT_DIR=$1
  GIT_BRANCH=${2:-master}
  git -C $GIT_DIR pull origin ${GIT_BRANCH}
  git -C $GIT_DIR add -A
  git -C $GIT_DIR commit -m "$(id -un)@$(hostname)" && notify-send $(basename $0) "${GIT_DIR}"
  git -C $GIT_DIR push origin ${GIT_BRANCH}
}

# qutebrowser

function qute-screenedit() {
  st -e "vim" "$QUTE_HTML"
}

function qute-textedit() {
  st -e "vim" "$QUTE_TEXT"
}

function qute-copy() {
  cat $QUTE_TEXT | xsel -ib
}

function qute-jira() {
  cat $QUTE_TEXT | get-jira | rofi-select "echo open -t https://jira.openbet.com/browse/{}" >> "$QUTE_FIFO"
}

function qute-url() {
  cat "$QUTE_HTML" | detect-url | rofi-select "echo open -t {}" >> "$QUTE_FIFO"
}

function qute-clone() {
  local repository=$(cat "$QUTE_HTML" | detect-url "(ssh://)?(git://)?git@" | rofi-select)
  [[ -z $repository ]] && exit 0
  local tmp1=${repository##*:}
  local tmp2=${tmp1#[0-9]*/}
  local path="$HOME/Code/${tmp2%%.git}"
  mkdir -p $path

  if [[ -d ${path}/.git ]] || git -C ${path} rev-parse --git-dir > /dev/null 2>&1; then
    notify-send $(basename $0) "$path already checked out"
  else
    git clone $repository $path
    notify-send $(basename $0) "$path finished cloning"
  fi

  tmux new-window -c $path
}

function qute-tokens() {
  cat "$QUTE_TEXT" | get-tokens | xsel -ib
}

function qute-search() {
  cat "$QUTE_TEXT" | get-tokens | xargs -I{} echo "open -b s {}" >> "$QUTE_FIFO"
}

function qute-bookmark-save() {
  local path="$HOME/Sync/Secret/lists/bookmarks"
  echo "[$QUTE_TITLE]($QUTE_URL)" >> $path
  sort -u -o $path $path
}

function qute-bookmark-open() {
  cat "$HOME/Sync/Secret/lists/bookmarks" | rofi-select | xurls | xargs -I{} echo "open -t {}" >> "$QUTE_FIFO"
}

# st

function st-jira() {
  get-jira | rofi-select 'xdg-open https://jira.openbet.com/browse/{}'
}

function st-screenedit() {
  tmpfile=$(mktemp /tmp/st-edit.XXXXXX)
  trap 'rm "$tmpfile"' 0 1 15
  cat > "$tmpfile"
  st -e "vim" "$tmpfile"
}

function st-url() {
  detect-url | rofi-select 'xdg-open {}'
}

function st-tokens() {
  get-tokens | xsel -ib
}

function st-lines() {
  local tmp=$(grep -v -e '^[[:space:]]*$' | rofi-select)
  [[ -z $tmp ]] && exit 0
  type-text "$tmp"
}

# i3

function i3-lock() {
  TMPIMG=/tmp/screen.png
  scrot $TMPIMG
  convert $TMPIMG -scale 5% -scale 2000% $TMPIMG
  xkb-switch -s us
  trap "xset dpms 0 0 0" SIGHUP SIGINT SIGTERM
  i3lock -n -u -e -i $TMPIMG
  rm $TMPIMG
}

# audio

audio-move-sink-inputs() {
  local sink="$1"
  [[ -z $sink ]] && exit 0
  inputs=$(pactl list sink-inputs)

  while read -r input; do
    index=$(echo "$input" | grep -oP "\d+$")
    pactl move-sink-input "$index" "$sink"
  done < <(echo "$inputs" | grep "Sink Input")
}

audio-move-source-outputs() {
  local output="$1"
  [[ -z $output ]] && exit 0
  inputs=$(pactl list source-outputs)

  while read -r input; do
    index=$(echo "$input" | grep -oP "\d+$")
    pactl move-source-output "$index" "$output"
  done < <(echo "$inputs" | grep "Source Output")
}

audio-list-sinks() {
  pactl list sinks | awk '/Sink #/ { printf "%s",$2 }; /Description/ { gsub(/Description:/," "); print }' | tr -d '#' | grep -v "HDMI"
}

audio-list-sources() {
  pactl list sources | awk '/Source #/ { printf "%s",$2 }; /Description/ { gsub(/Description:/," "); print }' | tr -d '#' | grep -v "Monitor"
}

audio-select-sink() {
  sink=$(audio-list-sinks | rofi-select | cut -f 1 -d " ")
  [[ -z $sink ]] && exit 0
  pactl set-default-sink $sink
  audio-move-sink-inputs $sink
}

audio-select-source() {
  source=$(audio-list-sources | rofi-select | cut -f 1 -d " ")
  [[ -z $source ]] && exit 0
  pactl set-default-source $source
  audio-move-source-outputs $source
}

# sxhkd

mp3-dl() {
  youtube-dl --no-playlist --extract-audio --audio-format mp3 --output "~/Music/%(title)s.%(ext)s" $1
}

save-link() {
  xdotool selectwindow key --clearmodifiers ctrl+l ctrl+c
  url=$(xsel)
  curl -X POST -F "url=$url" -F "host=$(hostname)" -F "user=$(id -un)" https://servus.dictummortuum.com/links

  if [[ $url =~ "https://www.youtube.com/watch" ]]; then
    notify-send "downloading ... $url"
    mp3-dl $url && notify-send "Song downloaded successfully"
  fi
}

$*
